<?xml version="1.0" encoding="UTF-8" ?>

<project xmlns:ivy="antlib:org.apache.ivy.ant" name="common">

    <property environment="env"/>

    <property name="ivy.install.version" value="2.2.0" />

    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>

    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <property name="src.unit_tests" location="src/main/test" />

    <property name="src.functional_tests" location="src/main/functional_test" />

    <property name="dist" location="target" />

    <property name="classes_dir" location="${dist}/classes" />

    <property name="unit_test_classes_dir" location="${dist}/unit-test-classes" />

    <property name="functional_test_classes_dir" location="${dist}/functional-test-classes" />

    <property name="reports.tests" location="${dist}/reports" />

    <target name="compile">
        <mkdir dir="${classes_dir}" />
        <javac srcdir="src/main/java" destdir="${classes_dir}" debug="true" source="1.6" target="1.6" includeantruntime="false">
            <classpath refid="compile-classpath">
            </classpath>
        </javac>
        <copy todir="${classes_dir}">
            <fileset dir="src/main/java" />
        </copy>
        <copy todir="${classes_dir}">
            <fileset dir="src/main/resources" />
        </copy>
    </target>

    <target name="check.unit-tests-exist">
        <condition property="unit-tests-exist">
            <available file="${src.unit_tests}" />
        </condition>
    </target>

    <target name="compile-unit-test" depends="check.unit-tests-exist, compile" if="unit-tests-exist">
        <mkdir dir="${unit_test_classes_dir}" />
        <javac srcdir="${src.unit_tests}" destdir="${unit_test_classes_dir}" debug="true" source="1.6" target="1.6" includeantruntime="false">
            <classpath>
                <path refid="compile-classpath" />
                <pathelement location="${classes_dir}" />
            </classpath>
        </javac>
    </target>

    <target name="unit-test" depends="compile-unit-test" if="unit-tests-exist">
        <mkdir dir="${reports.tests}" />
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="test-classpath" />
            <formatter type="plain" />
            <batchtest todir="${reports.tests}">
                <fileset dir="${src.unit_tests}">
                    <include name="**/*Test*.java" />
                    <exclude name="**/AllTests.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="check.functional-tests-exist">
        <condition property="functional-tests-exist">
            <available file="${src.functional_tests}" />
        </condition>
    </target>

    <target name="compile-functional-test" depends="compile, compile-unit-test" if="functional-tests-exist">
        <mkdir dir="${functional_test_classes_dir}" />
        <javac srcdir="${src.functional_tests}" destdir="${functional_test_classes_dir}" debug="true" source="1.6" target="1.6" includeantruntime="false">
            <classpath>
                <pathelement location="${unit_test_classes_dir}" />
                <path refid="compile-classpath" />
                <pathelement location="${classes_dir}" />
            </classpath>
        </javac>
    </target>

    <target name="functional-test" depends="compile-functional-test, deploy" if="functional-tests-exist">
        <mkdir dir="${reports.tests}" />
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="test-classpath" />
            <formatter type="plain" />
            <batchtest todir="${reports.tests}">
                <fileset dir="${src.functional_tests}">
                    <include name="**/*Test*.java" />
                    <exclude name="**/AllTests.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="clean">
        <delete dir="${dist}" />
    </target>

</project>
